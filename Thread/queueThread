import threading
import time
import queue

threads = []
threadId = 1
threadList = ['t1','t2','t3']
nameList = ['one','two','three','four','five']
workqueue = queue.Queue(10)
exitFlag = 0 
queueLock = threading.Lock()

class myThread(threading.Thread):
    def __init__(self,id,name,q):
        threading.Thread.__init__(self)
        self.id = id
        self.name = name
        self.q = q

    def run(self):
        print(f'开始线程:{self.name}')
        work(self.name,self.q)
        print(f'退出线程{self.name}')

    
def work(name,q):
    while not exitFlag:
        queueLock.acquire()
        if not workqueue.empty():
            data = q.get()
            queueLock.release()
            print(f'{name}处理{data}')
        else:
            queueLock.release()
        time.sleep(1)

for t in threadList:
    thread = myThread(threadId,t,workqueue)
    thread.start()
    threads.append(thread)
    threadId += 1

queueLock.acquire()
for w in nameList:
    workqueue.put(w)
queueLock.release()

while not workqueue.empty():
    pass

exitFlag = 1

for t in threads:
    t.join()

print('退出主线程')



